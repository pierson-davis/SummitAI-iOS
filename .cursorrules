# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- **CRITICAL**: All shell commands for autonomous execution MUST include timeout and error handling: `timeout [DURATION] bash -c '[COMMAND]' || { echo "ERROR: [DESCRIPTION]" >&2; exit 1; }`
- **CRITICAL**: Validation scripts must be automated and include comprehensive error detection with clear success/failure indicators
- **CRITICAL**: Rollback procedures must be automated with clear commit identification and testing verification
- **CRITICAL**: Commit messages must follow the exact format with file lists, testing results, risk assessment, and rollback plans
- **CRITICAL**: Every step must include both automated validation scripts AND manual checklists for comprehensive verification
- **CRITICAL**: Error detection and resolution must be proactive, not reactive - include automated fixes where possible
- **CRITICAL**: All commands must be executable by an autonomous agent without human intervention
- **CRITICAL**: Documentation must be updated simultaneously with code changes, not as an afterthought
- **CRITICAL**: Perfect execution plans require ATOMIC-LEVEL detail with every command, file path, validation step, and error handling explicitly specified
- **CRITICAL**: Autonomous agent execution requires timeout-wrapped commands with comprehensive error detection and automated recovery procedures
- **CRITICAL**: Developer handoff documentation must include zero-ambiguity specifications that eliminate all questions about implementation

# Scratchpad

## Current Task: AUTONOMOUS SUMMITAI APP EXECUTION

**Task**: Execute the complete 400-step SummitAI mountain climbing fitness app development plan autonomously with:
- 20 phases with 20 substeps each (400 total steps)
- Native iOS app development (Swift/SwiftUI)
- MVVM architecture
- Firebase for data/auth (Apple Auth)
- Superwall for paywalls (placeholders)
- Git/GitHub tracking for every feature
- Apple native UI feeling
- Phased testing for each step
- Comprehensive documentation
- Avoid non-native packages
- Focus on: scalability, complexity, shareability, security, UX

**Status**: [X] Examined reference app structure and existing plans
[X] Read master plan, architecture, design system docs
[X] Create comprehensive 20-phase plan with 400 sub-steps
[X] Include detailed Git workflow, testing, validation
[X] Add rollback procedures and risk mitigation
[X] Complete documentation structure
[X] **EXAMINED AUTONOMOUS EXECUTOR - READY TO START**
[ ] **ðŸš€ STARTING AUTONOMOUS EXECUTION**

**Progress**: ðŸš€ **STARTING PHASE 1 EXECUTION**
- [X] Planning documents completed
- [X] Autonomous executor analyzed and validated
- [ ] **STARTING PHASE 1: PROJECT FOUNDATION & GIT SETUP**
- [ ] Phase 1.1: Git Repository Initialization
- [ ] Phase 1.2: GitHub Repository Setup
- [ ] Phase 1.2: GitHub Repository Setup
- [ ] Phase 1.3: Project Structure & Architecture
- [ ] Phase 1.4: Development Environment Setup
- [ ] Phase 1.5: Initial Documentation
- [ ] Phase 1.6: Code Quality Tools
- [ ] Phase 1.7: Testing Framework Setup
- [ ] Phase 1.8: CI/CD Pipeline Configuration
- [ ] Phase 1.9: Security Configuration
- [ ] Phase 1.10: Performance Monitoring Setup
- [ ] Phase 1.11: Error Tracking Setup
- [ ] Phase 1.12: Analytics Configuration
- [ ] Phase 1.13: Localization Setup
- [ ] Phase 1.14: Accessibility Configuration
- [ ] Phase 1.15: App Store Preparation
- [ ] Phase 1.16: Legal Compliance
- [ ] Phase 1.17: Backup & Recovery
- [ ] Phase 1.18: Monitoring & Alerting
- [ ] Phase 1.19: Documentation Generation
- [ ] Phase 1.20: Phase 1 Validation & Testing

**Execution Context**: 
- **Current Phase**: 1 (Project Foundation & Git Setup)
- **Current Step**: 1.1 (Git Repository Initialization)
- **Total Steps Remaining**: 400
- **Execution Mode**: AUTONOMOUS with timeout protection
- **Error Handling**: Automated recovery procedures
- **Validation**: Comprehensive automated testing
- **Documentation**: Real-time updates
